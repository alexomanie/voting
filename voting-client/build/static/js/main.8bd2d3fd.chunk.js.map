{"version":3,"sources":["Question.jsx","QuestionForm.jsx","Header.jsx","App.jsx","serviceWorker.js","theme.js","index.js"],"names":["Question","React","memo","question","handleVote","handleComplete","handleDelete","rest","flipId","_id","sx","variant","complete","flexDirection","alginItems","justifyContent","width","text","height","display","alignSelf","fontSize","votes","cursor","outline","onClick","className","QuestionForm","handleClick","useState","setQuestion","placeholder","marginRight","value","onChange","event","target","Header","membersOnline","alignItems","marginBottom","py","backgroundColor","src","to","fontWeight","mx","aria-label","xmlns","viewBox","fill","r","cx","cy","strokeWidth","App","ws","useRef","connectedUsers","setConnectedUsers","questions","setQuestions","useEffect","current","io","disconnect","fetchData","a","axios","result","data","sort","b","on","message","id","filter","map","console","log","postNewQuestion","newQuestionText","post","vote","put","deleteQuestion","delete","minHeight","marginTop","flex","mb","spring","flipKey","q","join","ele","index","key","Boolean","window","location","hostname","match","merge","tailwind","colors","primary","blue","secondary","orange","muted","gray","textMuted","cpGreen","background","styles","color","textDecoration","transition","buttons","px","lineHeight","borderWidth","borderStyle","borderColor","borderRadius","boxShadow","cards","p","icon","svg","label","ml","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8bd2d3fd.chunk.js","sourcesContent":["/** @jsx jsx */\nimport React from 'react';\nimport { Text, jsx, IconButton, Button, Flex, Box } from 'theme-ui';\nimport { Flipped } from 'react-flip-toolkit';\nimport './styles.css';\n\nexport const Question = React.memo(\n    ({ question, handleVote, handleComplete, handleDelete, ...rest }) => {\n        return (\n            <Flipped flipId={question._id}>\n                <div\n                    sx={{\n                        variant:\n                            question.complete === false\n                                ? 'cards.question'\n                                : 'cards.complete',\n                    }}\n                    {...rest}\n                >\n                    <Flex\n                        sx={{\n                            flexDirection: 'row',\n                            alginItems: 'center',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <Text sx={{ width: '100%' }}>{question.text}</Text>\n                        {question.complete === false && (\n                            <Flex\n                                sx={{\n                                    width: '128px',\n                                    height: '48px',\n                                    display: 'flex',\n                                    flexDirection: 'row',\n                                    alginItems: 'center',\n                                    justifyContent: 'flex-end',\n                                }}\n                            >\n                                <Text\n                                    sx={{\n                                        alignSelf: 'center',\n                                        fontSize: '2',\n                                    }}\n                                >\n                                    {question.votes}\n                                </Text>\n                                <IconButton\n                                    sx={{\n                                        height: '45px',\n                                        width: '50px',\n                                        cursor: 'pointer',\n                                        '&:focus': {\n                                            outline: 'none',\n                                        },\n                                    }}\n                                    onClick={() => handleVote(question._id)}\n                                >\n                                    <div className=\"heart\"></div>\n                                </IconButton>\n                            </Flex>\n                        )}\n                    </Flex>\n                    {question.complete === false && (\n                        <Flex sx={{ justifyContent: 'flex-end' }}>\n                            <Button\n                                onClick={() => handleComplete(question._id)}\n                            >\n                                Beantwortet\n                            </Button>\n                        </Flex>\n                    )}\n                    {question.complete === true && (\n                        <Flex sx={{ justifyContent: 'flex-end' }}>\n                            <Button onClick={() => handleDelete(question._id)}>\n                                Löschen\n                            </Button>\n                        </Flex>\n                    )}\n                </div>\n            </Flipped>\n        );\n    },\n);\n","import React, { useState } from 'react';\nimport { Input, Button, Flex } from 'theme-ui';\n\nexport const QuestionForm = ({ handleClick }) => {\n    const [question, setQuestion] = useState('');\n\n    return (\n        <div>\n            <Flex>\n                <Input\n                    placeholder=\"Frage eingeben\"\n                    sx={{ marginRight: 3 }}\n                    value={question}\n                    onChange={event => setQuestion(event.target.value)}\n                ></Input>\n                <Button\n                    onClick={() => {\n                        handleClick(question);\n                        setQuestion('');\n                    }}\n                >\n                    Frage abschicken\n                </Button>\n            </Flex>\n        </div>\n    );\n};\n","/** @jsx jsx */\nimport { Link, Flex, jsx, Card, Text, Box, Image } from 'theme-ui';\n\nexport const Header = ({ membersOnline }) => {\n    return (\n        <Card\n            sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'center',\n                variant: 'cards.question',\n                marginBottom: 4,\n                py: 1,\n                backgroundColor: '',\n            }}\n        >\n            <Image\n                sx={{ width: '48px', height: '48px', marginRight: 3 }}\n                src=\"logo.png\"\n            />\n\n            <Link\n                to=\"/\"\n                sx={{\n                    variant: 'styles.navlink',\n                    fontSize: 5,\n                    fontWeight: 'bold',\n                }}\n            >\n                CP Q & A\n            </Link>\n            <div sx={{ mx: 'auto' }} />\n            <Flex\n                sx={{\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                    height: '24px',\n                    justifyContent: 'center',\n                }}\n            >\n                <Text sx={{ alignSelf: 'center' }}>\n                    online: {membersOnline}\n                </Text>\n                <Box\n                    sx={{ width: '16px', height: '16px' }}\n                    aria-label=\"Toggle dark mode\"\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 16 16\"\n                        width=\"16\"\n                        height=\"16\"\n                        fill=\"currentcolor\"\n                    >\n                        <circle\n                            r={4}\n                            cx={8}\n                            cy={6}\n                            fill=\"#6da40c\"\n                            strokeWidth={0}\n                        />\n                    </svg>\n                </Box>\n            </Flex>\n        </Card>\n    );\n};\n","/** @jsx jsx */\nimport { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { Question } from './Question';\nimport axios from 'axios';\nimport { QuestionForm } from './QuestionForm';\n\nimport { Container, jsx } from 'theme-ui';\nimport { Flipper, Flipped } from 'react-flip-toolkit';\nimport { Header } from './Header';\n\nfunction App() {\n    const ws = useRef(null);\n    const [connectedUsers, setConnectedUsers] = useState(0);\n    const [questions, setQuestions] = useState([]);\n\n    useEffect(() => {\n        ws.current = io('http://localhost:4000');\n        return () => {\n            ws.current.disconnect();\n        };\n    }, []);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                'http://localhost:4000/api/v1/questions',\n            );\n            setQuestions(result.data.sort((a, b) => b.votes - a.votes));\n        };\n        ws.current.on('question', message => {\n            setQuestions(questions => (questions = [...questions, message]));\n        });\n\n        ws.current.on('delete', id => {\n            setQuestions(questions =>\n                questions.filter(question => question._id !== id),\n            );\n        });\n        ws.current.on('complete', message => {\n            setQuestions(questions => {\n                return [...questions]\n                    .map(question => {\n                        if (question._id === message._id)\n                            return { ...question, complete: message.complete };\n                        return question;\n                    })\n                    .sort((a, b) => b.votes - a.votes);\n            });\n        });\n        ws.current.on('vote', message => {\n            console.log(message);\n            setQuestions(questions => {\n                console.log(questions);\n                return [...questions]\n                    .map(question => {\n                        if (question._id === message._id)\n                            return { ...question, votes: message.votes };\n                        return question;\n                    })\n                    .sort((a, b) => b.votes - a.votes);\n            });\n        });\n        fetchData();\n        ws.current.on('users', message => {\n            console.log('received users event! ', message);\n            setConnectedUsers(message);\n        });\n    }, []);\n\n    const postNewQuestion = async newQuestionText => {\n        await axios.post('http://localhost:4000/api/v1/questions', {\n            text: newQuestionText,\n        });\n    };\n\n    const vote = async id => {\n        await axios.put(`http://localhost:4000/api/v1/questions/${id}/votes`);\n    };\n\n    const complete = async id => {\n        await axios.put(\n            `http://localhost:4000/api/v1/questions/${id}/complete`,\n        );\n    };\n\n    const deleteQuestion = async id => {\n        await axios.delete(`http://localhost:4000/api/v1/questions/${id}/`);\n    };\n\n    return (\n        <div\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: '100vh',\n            }}\n        >\n            <div\n                sx={{\n                    marginTop: 3,\n                    width: '9/12',\n                    mx: 'auto',\n                    flex: '1 1 auto',\n                }}\n            >\n                <Container>\n                    <Header membersOnline={connectedUsers}></Header>\n                </Container>\n                <Container sx={{ mb: 3 }}>\n                    <QuestionForm handleClick={postNewQuestion}></QuestionForm>\n                </Container>\n                <Container>\n                    <Flipper\n                        spring={'noWobble'}\n                        flipKey={questions.map(q => q._id).join('')}\n                    >\n                        <Flipped flipId={'list'}>\n                            <div>\n                                <div>\n                                    {questions\n                                        .filter(ele => ele.complete === false)\n                                        .map((question, index) => (\n                                            <Question\n                                                index={index}\n                                                key={question._id}\n                                                handleVote={vote}\n                                                handleComplete={complete}\n                                                question={question}\n                                            ></Question>\n                                        ))}\n                                </div>\n                                <div>\n                                    {questions\n                                        .filter(ele => ele.complete === true)\n                                        .map((question, index) => (\n                                            <Question\n                                                index={index}\n                                                key={question._id}\n                                                handleVote={vote}\n                                                handleComplete={complete}\n                                                handleDelete={deleteQuestion}\n                                                question={question}\n                                            ></Question>\n                                        ))}\n                                </div>\n                            </div>\n                        </Flipped>\n                    </Flipper>\n                </Container>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { tailwind } from '@theme-ui/presets';\nimport { merge } from 'theme-ui';\n\nconst baseButtonStyle = {\n    py: 2,\n    px: 3,\n    cursor: `pointer`,\n    fontSize: `100%`,\n    lineHeight: `inherit`,\n};\n\nexport default merge(tailwind, {\n    colors: {\n        primary: tailwind.colors.blue[6],\n        secondary: tailwind.colors.orange[6],\n        muted: tailwind.colors.gray[6],\n        textMuted: `#69778c`,\n        cpGreen: '#6da40c',\n        background: tailwind.colors.gray[2],\n    },\n    styles: {\n        a: {\n            color: `cpGreen`,\n            textDecoration: `none`,\n            transition: `all 0.3s ease-in-out`,\n            cursor: 'pointer',\n        },\n    },\n    buttons: {\n        primary: {\n            ...baseButtonStyle,\n            backgroundColor: `white`,\n            borderWidth: `1px`,\n            borderStyle: `solid`,\n            borderColor: `gray.4`,\n            color: `text`,\n            fontWeight: `bold`,\n            borderRadius: `default`,\n            boxShadow: `default`,\n            '&:hover': {\n                backgroundColor: `gray.1`,\n            },\n            '&:focus': {\n                outline: 'none',\n            },\n        },\n    },\n    cards: {\n        question: {\n            background: `white`,\n            borderRadius: `default`,\n            boxShadow: `default`,\n            p: 3,\n            mb: 3,\n        },\n        complete: {\n            background: tailwind.colors.gray[3],\n            borderRadius: `default`,\n            boxShadow: `default`,\n            p: 3,\n            mb: 3,\n        },\n        icon: {\n            svg: {\n                width: 8,\n                borderRadius: `full`,\n                p: 2,\n                background: `white`,\n                '.primary': {\n                    fill: `currentColor`,\n                    color: `primary`,\n                },\n                '.secondary': {\n                    fill: `currentColor`,\n                    color: `blue.8`,\n                },\n            },\n        },\n        label: {\n            boxShadow: `default`,\n            background: `white`,\n            px: 3,\n            py: 2,\n            borderRadius: `lg`,\n            ml: 2,\n            fontSize: 0,\n            fontWeight: `semibold`,\n        },\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport { ThemeProvider, jsx } from 'theme-ui';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}